getTrackSegments_updated <- function(data,
                             timestamps,
                             windowSize = 29,
                             isFocalPoint = function(i, ts) {
                               TRUE
                             },
                             isSamplingRegular = 1,
                             focalSampleBefore = 0) {
  windowSize = getWindowSizeLR(windowSize)
  isFocalPoint = getIsFocalPointFunction(isFocalPoint)
  isSamplingRegular = getIsSamplingRegularFunction(isSamplingRegular)
  stopifnot(ncol(data) == 4)
  stopifnot(nrow(data)== length(timestamps))
  focalPoints <- 1:nrow(data)
  focalPoints <-
    focalPoints[focalPoints > windowSize[1] &
                  focalPoints <= (nrow(data) - windowSize[2]) &
                  isFocalPoint(focalSampleBefore + focalPoints, timestamps)]
  if (!(length(focalPoints) > 0)) {
    stop("No sample locations selected, either through the focal function or large windowSize")
  }
  selRange <- -windowSize[1]:windowSize[2]
  segments <- lapply(focalPoints, '+', selRange)
  times <- lapply(segments , function(x, i) {
    x[i]
  }, x = timestamps)
  isGoodSegment <- unlist(lapply(times, isSamplingRegular))
  if (!is.null(data$animalIds)) {
    animals <- lapply(segments , function(x, i) {
      x[i]
    }, x = data$animalIds)
    isGoodSegment = isGoodSegment &
      unlist(lapply(animals, function(l)
        all(l == l[1])))
  }
  if (!any(isGoodSegment))
    stop("No sample locations selected due to irregular sampling")
  focalPoints = focalPoints[isGoodSegment]
  segments = segments[isGoodSegment]
  
  groundSpeedsL <-
    lapply(segments, function(i, x) {
      x[i,]
    }, as.matrix(data[, 1:4], rownames.force = F))
  naGrnd <- !unlist(lapply(lapply(groundSpeedsL, is.na), any))
  focalPoints <- focalPoints[naGrnd]
  segments <- segments[naGrnd]
  times <- times[naGrnd]
  groundSpeedsL <- groundSpeedsL[naGrnd]
  if (length(groundSpeedsL) == 0)
    stop("No sample locations selected due to missing ground speed values")
  names(groundSpeedsL)<-focalPoints
  groundSpeedsL<-mapply(`rownames<-`, groundSpeedsL, segments, SIMPLIFY = F)
  return(groundSpeedsL)
}
